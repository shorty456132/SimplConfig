/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE      
#DEFINE_CONSTANT maxDisplays 8
#DEFINE_CONSTANT maxSources 8

                    
#USER_SIMPLSHARP_LIBRARY "ConsumeJson" 

string_output debug$,ATC_Number$;
digital_output AtcIsEnabled,SetupPage_Fb;                    
digital_Input setATC,saveNumberOfDisplays,saveNumberOfSources,getATC,SaveATC,InitMethods,getDisplays[maxDisplays],saveDisplay[maxDisplays],getSource[maxSources],saveSource[maxSources],getSubpage[maxSources];
analog_Input OutputSave,SetNumberOfDisplays,InputSave,SetNumberOfSources;
analog_output SetNumberOfDisplays_Fb,SetNumberOfSources_Fb, sourceInput_Fb[maxSources],sourceID_Fb[maxSources],OutputNum[maxDisplays];   
string_Input SetATCNumber[11];             
string_Input NameSave[100],MakeSave[100],ModelSave[100],PowerOnSave[100],PowerOffSave[100];
string_Input SourceNameSave[100],SourceSubpageSave[100];
string_Output displayID$[maxDisplays],displayName$[maxDisplays],displayMake$[maxDisplays],displayModel$[maxDisplays],PowerOn$[maxDisplays],PowerOff$[maxDisplays],sourceName$[maxSources],sourceSubpage$[maxSources];        //OutputNum$[maxDisplays]



String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,FileLocation[100];  

integer saveDisplayTemp,getDisplayTemp,getSourceTemp, getSubpageTemp, ATCEnableTemp; 
 
ConfigurationLoader myConfig;  
DisplayConfiguration myDisplayConfig;

Push InitMethods
{
	myConfig.InitMethod(FileLocation);
}                                 
Push getDisplays
{                        
	
	getDisplayTemp = getLastModifiedArrayIndex();   
	getDisplayTemp = getDisplayTemp - 1;   //s# index starts at 0
	
	myConfig.getDisplay(getDisplayTemp);	
}        
Push saveDisplay
{
	integer i;
	i = getLastModifiedArrayIndex();
	i = i - 1;
	
	myConfig.SaveDisplay(i,NameSave,MakeSave,ModelSave,PowerOnSave,PowerOffSave,OutputSave);  
} 
push getSource
{
	getSourceTemp = getLastModifiedArrayIndex();
	getSourceTemp = getSourceTemp - 1;
	
	myConfig.getSource(getSourceTemp);
}                                                
push saveSource     
{
	integer i;
	i = getLastModifiedArrayIndex();
	i = i - 1;
	
	myConfig.SaveSource(i, SourceNameSave, InputSave, SourceSubpageSave);
}      
push getSubPage
{
	getSubPageTemp = getLastModifiedArrayIndex();
	getSubpageTemp = getSubpageTemp - 1;
	
	myConfig.getSubpage(getSubpageTemp);
}
   
push saveNumberOfDisplays
{
	myConfig.saveDisplayNumber(SetNumberOfDisplays);
}   
push SaveNumberOfSources
{
	myConfig.saveSourceNumber(SetNumberOfSources);
}   
   
push getAtc
{
	myConfig.getAtcInfo(); 
}  
push setATC
{

	if(AtcIsEnabled = 0)
	{
		myConfig.saveAtcEnable(1);  
	}
	else if(AtcIsEnabled = 1)
	{
		myConfig.saveAtcEnable(0);
	}
}
push SaveATC
{
	myConfig.SaveAtcInfo(SetATCNumber);
} 
  



callback function SPShowSetupPage(integer _setupPageState)
{
	SetupPage_Fb = _setupPageState;
}

   
callback function SPUpdateDisplayID(string displayID)
{
	displayID$[getDisplayTemp + 1] = displayID;
}                
callback function SPUpdateDisplayName(string displayName)    
{
	displayName$[getDisplayTemp + 1] = displayName;
}
callback function SPUpdateDisplayMake(string displayMake)
{
	displayMake$[getDisplayTemp + 1] = displayMake;
}
callback function SPUpdateDisplayModel(string displayModel)
{
	displayModel$[getDisplayTemp + 1] = displayModel;
}
callback function SPUdateDisplayPowerOn(string displayPowerOn)
{
	PowerOn$[getDisplayTemp + 1] = displayPowerOn;
}
callback function SPUdateDisplayPowerOff(string displayPowerOff)
{
	PowerOff$[getDisplayTemp + 1] = displayPowerOff;
}
callback function SPUdateDisplayOutputNum(integer displayOutputNum)
{
     OutputNum[getDisplayTemp + 1] = displayOutputNum;
}                                  
callback function SPNumOfDisplays(integer _displayNumber)
{
	SetNumberOfDisplays_Fb = _displayNumber;	
} 

  

callback function SPSourceNumber(integer _sourceNumber)
{
	SetNumberOfSources_Fb = _sourceNumber;
}
callback function SPSourceID(integer _sourceID)
{
	sourceID_Fb[getSourceTemp] = _sourceID;
}
callback function SPSourceName(string _sourceName)
{
	sourceName$[getSourceTemp + 1] = _sourceName;
}
callback function SPSourceInput(integer _sourceInput)
{
    sourceInput_Fb[getSourceTemp + 1] = _sourceInput;
}
callback function SPSourceSubpage(string _sourceSubpage)
{
	sourceSubpage$[getSubpageTemp + 1] = lower(_sourceSubpage); 
} 

   
callback function SPATCEnableState(integer _atcEnableState)
{   
	AtcIsEnabled = _atcEnableState;   
}
callback function SPAtcNumber(string _atcNumber)
{
	ATC_Number$ = _atcNumber;	
}          
          

function Main()                    
{                                  
	waitforinitializationcomplete();  
	ATCEnableTemp = 0; 
	
	registerDelegate (SourceConfiguration,ShowSetupPage,SPShowSetupPage);

	registerDelegate (DisplayConfiguration,DisplayNumber,SPNumOfDisplays);
	registerDelegate (DisplayConfiguration,DisplayID,SPUpdateDisplayID);   
	registerDelegate (DisplayConfiguration,DisplayName,SPUpdateDisplayName);
	registerDelegate (DisplayConfiguration,DisplayMake,SPUpdateDisplayMake);
	registerDelegate (DisplayConfiguration,DisplayModel,SPUpdateDisplayModel);
	registerDelegate (DisplayConfiguration,DisplayPowerOn,SPUdateDisplayPowerOn);
	registerDelegate (DisplayConfiguration,DisplayPowerOff,SPUdateDisplayPowerOff);
	registerDelegate (DisplayConfiguration,DisplayOutputNum,SPUdateDisplayOutputNum);       
	
	registerDelegate (SourceConfiguration,SourceNumber,SPSourceNumber);
	registerDelegate (SourceConfiguration,SourceID,SPSourceID);
	registerDelegate (SourceConfiguration,SourceName,SPSourceName);
	registerDelegate (SourceConfiguration,SourceInput,SPSourceInput);
	registerDelegate (SourceConfiguration,SourceSubpage,SPSourceSubpage); 
	   
	registerDelegate (AtcConfiguration,AtcActive,SPAtcEnableState); 
	registerDelegate (AtcConfiguration,AtcNumber,SPAtcNumber);
	
}                    
